// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hLRChXZFR2f6LnncSeLHTY
// Component: UWArgLRpKcQf
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import TextInput from "../../TextInput"; // plasmic-import: el7VZOZcqcjc/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: mFOYVC1VnDhM/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hLRChXZFR2f6LnncSeLHTY/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: UWArgLRpKcQf/css

createPlasmicElementProxy;

export const PlasmicAuthComponent__VariantProps = new Array("isSignUpFlow");

export const PlasmicAuthComponent__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSignUpFlow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUpFlow
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "mURNwyrpPaGgMmfSmwtkPE",
        opId: "509e7432-f262-4fb4-8a93-2f9a8dca6c34",
        userArgs: {},
        cacheKey: `plasmic.$.509e7432-f262-4fb4-8a93-2f9a8dca6c34.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___8GvpM,
          {
            [sty.textisSignUpFlow___8GvpMcrFp5]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          }
        )}
      >
        {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
          ? "Smart_uz App Registr"
          : "Smart_uz App"}
      </div>
      <TextInput
        data-plasmic-name={"emailInput"}
        data-plasmic-override={overrides.emailInput}
        className={classNames("__wab_instance", sty.emailInput, {
          [sty.emailInputisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
        name={"emailInput"}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["emailInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={"Enter your email"}
        required={false}
        type={"email"}
        value={generateStateValueProp($state, ["emailInput", "value"]) ?? ""}
      />

      <TextInput
        data-plasmic-name={"passwordInput"}
        data-plasmic-override={overrides.passwordInput}
        className={classNames("__wab_instance", sty.passwordInput, {
          [sty.passwordInputisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
        name={"passwordInput"}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["passwordInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={"Enter your password"}
        required={false}
        type={"password"}
        value={generateStateValueProp($state, ["passwordInput", "value"]) ?? ""}
      />

      <AntdButton
        data-plasmic-name={"submiButton"}
        data-plasmic-override={overrides.submiButton}
        className={classNames("__wab_instance", sty.submiButton, {
          [sty.submiButtonisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
        href={
          hasVariant($state, "isSignUpFlow", "isSignUpFlow")
            ? `/sign-up`
            : `/login`
        }
        size={"small"}
        type={(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "default";
            }
            throw e;
          }
        })()}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4FomD,
            {
              [sty.textisSignUpFlow___4FomDcrFp5]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            }
          )}
        >
          {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
            ? "Sign Up"
            : "Login"}
        </div>
      </AntdButton>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lPsC,
          {
            [sty.textisSignUpFlow__lPsCCrFp5]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          }
        )}
      >
        {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
          ? "If You have already account"
          : "Don't have an account?"}
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button, {
          [sty.buttonisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
        color={"link"}
        link={
          hasVariant($state, "isSignUpFlow", "isSignUpFlow")
            ? `/login`
            : `/sign-up`
        }
      >
        {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
          ? "Login Here"
          : "Sign Up Here"}
      </Button>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "emailInput", "passwordInput", "submiButton", "button"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  submiButton: ["submiButton"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthComponent__ArgProps,
          internalVariantPropNames: PlasmicAuthComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    submiButton: makeNodeComponent("submiButton"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
